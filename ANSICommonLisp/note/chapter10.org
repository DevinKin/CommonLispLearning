* 第十章-宏
** 求值
   ~eval~ 函数，它接受一个表达式，将其求值，然后返回它的值。
   #+begin_src common-lisp
     (eval '(+ 1 2 3))

     (eval '(format t "Hello"))
   #+end_src

   顶层：读取-求值-打印循环
   #+begin_src common-lisp
     (defun our-toplevel ()
       (do ()
           (nil)
         (format t "~%> ")
         (print (eval (read)))))
   #+end_src

   调用 ~eval~ 是跨越代码与列表接线的一种方法。但它不是一个好方法。
   - 它效率低下： ~eval~ 处理的是原始列表，或者当下编译它，或者用直编译器求值。两种方法都比执行编译过来的代码来得慢许多。
   - 表达式在没有词法语境(lexical context)的情况下被求值。例如：在一个 ~let~ 里面调用 ~eval~ ，传给 ~eval~ 的表达式将无法引用由 ~let~ 所设置的变量。
   
   ~quote~ 是为了防止它的参数被求值而存在的，它是特殊的操作符。

   函数 ~coerce~ 与 ~compile~ 可以把列表转成代码。

   ~coerce~ 函数将一个lambda表达式变成函数。
   #+begin_src common-lisp
     (coerce '(lambda (x) x) 'function)
   #+end_src

   ~compile~ 函数第一个参数为 ~nil~ ，它会编译第二个参数传入的lambda表达式。
   #+begin_src common-lisp
     (compile nil '(lambda (x) (+ x 2)))
   #+end_src

   由于 ~eval~ ， ~coerce~ 与 ~compile~ 的麻烦不是他们跨越了代码与列表之间的界限，而是他们在执行期做这件事。跨越界限的代价昂贵。
   
   大多数情况下，在编译器将列表转换为代码是没问题的，当程序执行时，几乎不用成本。

** 宏
   写出能写程序的程序最普遍的方法是通过定义宏。

   宏是通过转换而实现的操作符。你通过说明你一个调用应该翻译成什么，来定义宏。这个翻译过程为宏展开(macro-expansion)，宏展开由编译器自动完成。所以宏产生的代码，会变成程序的一部分。

   宏通常调用 ~defmarco~ 来定义，宏定义了该怎么翻译出一个函数调用。

   定义一个新的操作符，叫做 ~nil!~ ，它接受一个参数。这样形式 ~(nil! a)~ 的调用，会在求值或编译前，被翻译成 ~(setf a nil)~ 。
   #+begin_src common-lisp
     (defmacro nil! (x)
       (list 'setf x nil))
   #+end_src

   要测试一个宏，可以调用函数 ~macroexpand-1~ 接受一个宏调用，并产生它的展开式。
   #+begin_src common-lisp
     (macroexpand-1 '(nil! x))
   #+end_src

   一个宏调用可以展开成另一个宏调用。当编译器遇到一个宏调用时，它持续展开它，直到不可展开为止。

   宏的实现方式
   #+begin_src common-lisp
     (lambda (expr)
       (apply #'(lambda (x) (list 'setf x nil))
              (cdr expr)))
   #+end_src

   当使用 ~defmacro~ ，你定义一个类似这样的函数。 ~macroexpand-1~ 全部所做的事情就是，当它看到一个表达式的 ~car~ 是宏时，它将表达式传给对应的函数。

** 反引号
   反引号读取宏使得从模板建构列表变得有可能。

   一个反引号单独使时，等于普通的引号。单一一个反引号保护(防止)其参数被求值。
   #+begin_src common-lisp
     `(a b c)
     (A B C)
   #+end_src

   反引号的优点是，在一个反引号表达式里，你可以使用 ~,~ 与 ~,@~ (command-at)来重启求值。
   #+begin_src common-lisp
     (setf a 1 b 2)
     `(a is ,a and b is ,b)
     (A IS 1 AND B IS 2)
   #+end_src

   反引号取代调用 ~list~ ，可以写出产生展开式的宏。
   #+begin_src common-lisp
     (defmacro nil! (x)
       `(setf ,x nil))
   #+end_src

   ~,@~ 与逗号类似，但将(本来应该是列表的)参数扒开。将列表的元素插入模板来代替列表。
   #+begin_src common-lisp
     (setf lst '(a b c))
     (A B C)

     `(lst is ,lst)
     (LST IS (A B C))

     `(its elements are ,@lst)
     (ITS ELEMENTS ARE A B C)
   #+end_src

   在剩余参数表示代码主体的宏，我们想要一个 ~while~ 宏，只要初始测试表达式为真，对其主体求值。
   #+begin_src common-lisp
     ;; 目标效果
     (let ((x 0))
       (while (< x 10)
              (princ x)
              (incf x)))

     ;; while宏
     (defmacro while (test &rest body)
       `(do ()
            ((not ,test))
          ,@body))
   #+end_src

** 快速排序法
   ~rotatef~ 函数交换两个元素的值。
   #+begin_src common-lisp
     (defun quicksort (vec l r)
       (let ((i l)
             (j r)
             (p (svref vec (round (+ l r) 2))))
         (while (<= i j)
                (while (< (svref vec i) p) (incf i))
                (while (> (svrec vec j) p) (decf j))
                (when (<= i j)
                  (rotatef (svref vec i) (svref vec j))
                  (incf i)
                  (decf j)))
         (if (>= (- j l) 1) (quicksort vec l j))
         (if (>= (- r i) 1) (quicksort vec i r)))
       vec)
   #+end_src

** 设计宏
   ~ntimes~ 宏，它接受一个数字n并对其主体求值n次。

   不正确的方式，不小心引入的变量捕捉。
   #+begin_src common-lisp
     (defmacro ntimes (n &rest body)
       `(do ((x 0 (+ x 1)))
            ((>= x ,n))
          ,@body))
   #+end_src
   
   当一个宏展开式里用到的变量，恰巧与展开式即将插入的语境里，有使用同样名字作为变量的情况。
   #+begin_src common-lisp
     (let ((x 10))
       (ntimes 5
               (setf x (+ x 1)))
       x)

     ;; 宏展开式如下
     (let ((x 10))
       (do ((x 0 (+ x 1)))
           ((>= x 5))
         (setf x (+ x 1)))
       x)
   #+end_src

   使用 ~gensym~ 函数可以避免宏展开时捕捉语境的同名变量。
   #+begin_src common-lisp
     (defmacro ntimes (n &rest body)
       (let ((g (gensym)))
         `(do ((,g 0 (+ ,g 1)))
              ((>= ,g ,n))
         ,@body)))
   #+end_src

   ~gensym~ 通常前面有 ~#:~ 符号。

   宏的多重求值问题。第一个参数被直接插入 ~do~ 表达式，它会在每次迭代时被求值。第一个参数是有副作用的表达式时，错误就出现了。
   #+begin_src common-lisp
     (let ((v 10))
       (ntimes (setf v (- v 1))
               (princ ".")))

     ;; 宏展开式

     (let ((v 10))
       (do ((#:g1 0 (+ #:g1 1)))
           ((>= #:g1 (setf v (- v 1))))
         (princ ".")))
   #+end_src

   使用另一个 ~gensym~ 多重求值问题。
   #+begin_src common-lisp
     (defmacro ntimes (n &rest body)
       (let ((g (gensym))
             (h (gensym)))
         `(let ((,h ,n))
            (do ((,g 0 (+ ,g 1)))
                ((>= ,g ,h))
              ,@body))))

     ;; 宏展开后如下
     (LET ((#:G536 (SETF V (- V 1))))
       (DO ((#:G535 0 (+ #:G535 1))) ((>= #:G535 #:G536)) (PRINC ".")))
   #+end_src

   ~pprint~ 函数打印出带锁紧的表达式，检查宏展开式时特别有用。

   以下是大多数实现对于一个 ~cond~ 表达式会产生的展开式
   #+begin_src common-lisp
     (pprint (macroexpand-1 '(cond (a b)
                              (c d e)
                              (t f))))

     (IF A
         B
         (IF C
             (PROGN D E)
             (THE T F)))
   #+end_src

** 通用化引用
   由于一个宏调用可以直接在它出现的地方展开成代码，任何展开为 ~setf~ 表达式的宏调用都可以作为 ~setf~ 表达式的第一个参数。
   #+begin_src common-lisp
     (defmacro cah (lst)
       `(car ,lst))

     (let ((x (list 'a 'b 'c)))
       (setf (cah x) 44)
       x)
   #+end_src

   ~incf~ 的错误实现方式，lst是nil，第二个表达式会设成(2)，第一个表达式会设成(1 2)
   #+begin_src common-lisp
     (defmacro incf (x &optional (y 1))
       `(setf ,x (+ ,x ,y)))

     ;; lst为nil时，两表达式不相等
     (setf (car (push 1 lst)) (1+ (car (push 1 lst))))
     (incf (car (push 1 lst)))
     ;; 宏展开式为：lst为nil,(push 1 lst)没有固定引用
     (SETF (CAR (PUSH 1 LST)) (+ (CAR (PUSH 1 LST)) 1))
   #+end_src
   
   Common Lisp提供了 ~define-modify-macro~ 作为写出对于 ~setf~ 限制类别的宏的一种方法，它接受三个参数：宏的名字，额外的参数(隐含第一个参数place)，以及产生出place新数值的函数名。
   ~incf~ 定义
   #+begin_src common-lisp
     (define-modify-macro our-incf (&optional (y 1)) +)
     ;; 宏展开为
     (LET* ((#:G517 (PUSH 1 LST)))
       (SB-KERNEL:%RPLACA #:G517 (+ (CAR #:G517) 1)))
   #+end_src

   ~push~ 定义
   #+begin_src common-lisp
     (define-modify-macro append1f (val)
       (lambda (lst val) (append lst (list val))))
     ;; 宏展开式
     (SETQ LST ((LAMBDA (LST VAL) (APPEND LST (LIST VAL))) LST 'D))

     (let ((lst '(a b c)))
       (append1f lst 'd)
       lst)
   #+end_src

** 实用的宏函数
   #+begin_src common-lisp
     (defmacro for (var start stop &body body)
       (let ((gstop (gensym)))
         `(do ((,var ,start (1+ ,var))
               (,gstop ,stop))
              ((> ,var ,gstop))
            ,@body)))

     (defmacro in (obj &rest choices)
       (let ((insym (gensym)))
         `(let ((,insym ,obj))
            (or ,@(mapcar #'(lambda (c) `(eql ,insym ,c))
                          choices)))))

     (defmacro random-choice (&rest exprs)
       `(case (random ,(length exprs))
          ,@(let ((key -1))
              (mapcar #'(lambda (expr)
                          `(,(incf key) ,expr))
                      exprs))))

     (defmacro avg (&rest args)
       `(/ (+ ,@args) ,(length args)))

     (defmacro with-gensyms (syms &body body)
       `(let ,(mapcar #'(lambda (s)
                          `(,s (gensym)))
               syms)
          ,@body))

     (defmacro aif (test then &optional else)
       `(let ((it ,test))
          (if it ,then ,else)))
   #+end_src

   ~for~ 宏使用
   #+begin_src common-lisp
     (for x 1 8
       (princ x))
   #+end_src

   ~in~ 宏使用
   #+begin_src common-lisp
     (in (car expr) '+ '- '*)

     ;; 宏展开后如下
     (let ((op (car expr)))
       (or (eql op '+)
           (eql op '-)
           (eql op '*)))
   #+end_src

   ~random-choice~ 宏使用
   #+begin_src common-lisp
     (random-choice (turn-left) (turn-right))

     ;; 宏展开后如下
     (case (random 2)
       (0 (turn-left))
       (1 (turn-right)))
   #+end_src

   ~with-gensyms~ 宏使用
   #+begin_src common-lisp
     (with-gensyms (x y z)
       ...)

     ;; 宏展开后如下
     (let ((x (gensym)) (y (gensym)) (z (gensym)))
       ...)
   #+end_src

   ~avg~ 宏可以替代 ~avg~ 函数， ~avg~ 宏在编译期调用 ~length~ ， ~avg~ 函数在执行期调用 ~length~ 。

   ~aif~ 宏的 ~it~ 进行了变量捕捉。
   #+begin_src common-lisp
     (aif (calculate-somthing)
          (1+ it)
          0)
     ;;宏展开后如下
     (let ((val (calculate-something)))
       (if val
           (1+ val)
           0))
   #+end_src
** 总结
   调用 ~eval~ 是让Lisp将列表视为代码的一种方法，但这是不必要而且效率低落的。
   你通过叙说一个调用会展开成什么来定义一个宏。台面地下，宏只是返回表达式的函数。
   一个使用反引号定义的主题看起来像它会产生出的展开式。
   宏设计者需要注意变量捕捉及多重求值。宏可以通过漂亮打印 ~pprint~ 来测试他们的展开式。
   宏比函数来得灵活，可以用来定义许多实用函数。你甚至可以使用变量捕捉来获得好处。
   Lisp存活的原因是它将进化交给了程序员的双手。宏使其可能的部分原因之一。
